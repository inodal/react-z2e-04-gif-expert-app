{"version":3,"sources":["components/AddCategory.js","helpers/GetGif.js","components/GifGridItems.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","className","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItems","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","defaultCategories","categories","c","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,oCACA,0BAAMC,SAZW,SAACC,GAElBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,EAAWK,QAAhB,mBAA2BE,OAC7CN,EAAc,OAQd,2BACIO,KAAM,OACNC,MAAUT,EACVU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAoBfG,YAAc,4DAGtB,uBAAGC,UAAU,eAAb,iBAA2Cb,K,uBC9BtCc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,2DAC6CC,UAAUH,GADvD,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAe,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,yBAAKJ,UAAU,0CACX,yBAAKkB,IAAMd,EAAMe,IAAML,IACvB,2BAAKA,KCHJM,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZhB,mBAAS,CAC/BuB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAVAC,qBAAU,WACNvB,EAAQC,GACLuB,MAAK,SAAAC,GACFH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGpB,CAACnB,IAEGoB,EDf2BK,CAAazB,GAAjCa,EAFqB,EAE3BN,KAAcY,EAFa,EAEbA,QAEtB,OACI,oCACI,wBAAIrB,UAAU,qCAAd,IAAqDE,EAArD,KACEmB,GAAW,uBAAGrB,UAAU,oCAAb,cACb,yBAAKA,UAAU,aAEPe,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIgB,IAAMhB,EAAIC,IACLD,UEWlBiB,EAxBM,SAAC,GAA8B,IAAD,IAA5BC,yBAA4B,MAAR,GAAQ,IACX5C,mBAAS4C,GADE,mBACxCC,EADwC,KAC5B9C,EAD4B,KAG/C,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ8C,EAAWpB,KAAI,SAAAqB,GAAC,OACZ,kBAAC,EAAD,CACIJ,IAAQI,EACR9B,SAAa8B,U,MCXzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.10f9b7ad.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        // Avoid default behaviour that will submit and refresh whole view\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue.trim(), ...cats]); // Show new first\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <>\n        <form onSubmit= { handleSubmit }>\n            <input \n                type =\"text\"\n                value = { inputValue }\n                onChange = { handleInputChange }\n                placeholder = \"Search funny GIFs!! Type a topic and press enter NOW!!\"\n            />\n        </form>\n        <p className=\"hidden-elem\">GifExpertApp: { inputValue }</p>   \n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\n","\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?&limit=10&q=${encodeURI(category)}&api_key=a6moXgoQ6vuFxhVHum2nE6CPtZdV66Uz`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n\n    });\n    return gifs;\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifGridItems = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nGifGridItems.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItems } from './GifGridItems';\nimport PropTypes from 'prop-types'\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>  } \n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItems \n                            key={ img.id }\n                            { ...img } \n                        />\n                    ))\n                }\n            </div>\n        </>\n    );\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/GetGif';\n\n// All hooks start with use prefix: use{hook name} -> useFetchGifs\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // Use hook 'useEffect' to render\n    useEffect(() => {\n        getGifs(category)\n          .then(imgs => {\n              setState({\n                  data: imgs,\n                  loading: false\n              });\n            })\n    }, [category]);\n\n    return state; // { data: [], loading: true }\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n// import ReactDOM from 'react-dom';\n\nconst GifExpertApp = ({defaultCategories = []}) => {\n    const [categories, setCategories] = useState(defaultCategories);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n            \n            <ol>\n                {\n                    categories.map(c => (\n                        <GifGrid \n                            key = { c }\n                            category = { c } \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}